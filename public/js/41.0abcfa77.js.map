{"version":3,"file":"public/js/41.0abcfa77.js","mappings":"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","sources":["webpack://my_site/../../src/js/util/util.js","webpack://my_site/../../src/js/util/dom-events.js","webpack://my_site/../../src/js/util/viewport-size.js","webpack://my_site/../../src/js/slide/pan-bounds.js","webpack://my_site/../../src/js/slide/zoom-level.js","webpack://my_site/../../src/js/slide/slide.js","webpack://my_site/../../src/js/gestures/drag-handler.js","webpack://my_site/../../src/js/gestures/zoom-handler.js","webpack://my_site/../../src/js/gestures/tap-handler.js","webpack://my_site/../../src/js/gestures/gestures.js","webpack://my_site/../../src/js/main-scroll.js","webpack://my_site/../../src/js/keyboard.js","webpack://my_site/../../src/js/util/css-animation.js","webpack://my_site/../../src/js/util/spring-easer.js","webpack://my_site/../../src/js/util/spring-animation.js","webpack://my_site/../../src/js/util/animations.js","webpack://my_site/../../src/js/scroll-wheel.js","webpack://my_site/../../src/js/ui/ui-element.js","webpack://my_site/../../src/js/ui/button-arrow.js","webpack://my_site/../../src/js/ui/button-close.js","webpack://my_site/../../src/js/ui/button-zoom.js","webpack://my_site/../../src/js/ui/loading-indicator.js","webpack://my_site/../../src/js/ui/counter-indicator.js","webpack://my_site/../../src/js/ui/ui.js","webpack://my_site/../../src/js/slide/get-thumb-bounds.js","webpack://my_site/../../src/js/core/eventable.js","webpack://my_site/../../src/js/slide/placeholder.js","webpack://my_site/../../src/js/slide/content.js","webpack://my_site/../../src/js/slide/loader.js","webpack://my_site/../../src/js/core/base.js","webpack://my_site/../../src/js/opener.js","webpack://my_site/../../src/js/photoswipe.js"],"sourcesContent":["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  /* @ts-ignore */\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import { clamp } from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {Record<Axis, number>} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n    this.currZoomLevel = 1;\r\n    this.center = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.max = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.min = /** @type {Point} */ { x: 0, y: 0 };\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By default, it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement} [element] thumbnail element\r\n * @prop {string} [src] image URL\r\n * @prop {string} [srcset] image srcset\r\n * @prop {number} [w] image width (deprecated)\r\n * @prop {number} [h] image height (deprecated)\r\n * @prop {number} [width] image width\r\n * @prop {number} [height] image height\r\n * @prop {string} [msrc] placeholder image URL that's displayed before large image is loaded\r\n * @prop {string} [alt] image alt text\r\n * @prop {boolean} [thumbCropped] whether thumbnail is cropped client-side or not\r\n * @prop {string} [html] html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.pan = { x: 0, y: 0 };\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap', 'div');\r\n    /** @type {HTMLElement | null} */\r\n    this.holderElement = null;\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n    this.heavyAppended = false;\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load(false);\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\r\n  getPlaceholderElement() {\r\n    return this.content.placeholder?.element;\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    if (!prevZoomLevel) {\r\n      prevZoomLevel = this.zoomLevels.initial;\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\r\n  isPannable() {\r\n    return Boolean(this.width) && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\r\n  isZoomable() {\r\n    return Boolean(this.width) && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  /** @returns {string} */\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = { x: 0, y: 0 };\r\n  }\r\n\r\n  start() {\r\n    if (this.pswp.currSlide) {\r\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    }\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && this.pswp.options.closeOnVerticalDrag\r\n        && (currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit)\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!this.pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        this.pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        if (currSlide) {\r\n          roundPoint(currSlide.pan);\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { velocity } = this.gestures;\r\n    const { mainScroll, currSlide } = this.pswp;\r\n    let indexDiff = 0;\r\n\r\n    this.pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is visible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / this.pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched,\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if ((currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max)\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { velocity } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (this.pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Increasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        this.pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = this.pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    this.pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          this.pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = this.pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta || !currSlide) {\r\n      return false;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (this.pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - (this.pswp.currSlide?.bounds.center.y ?? 0)) / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startPan = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startZoomPoint = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._zoomPoint = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._wasOverFitZoomLevel = false;\r\n    /** @private */\r\n    this._startZoomLevel = 1;\r\n  }\r\n\r\n  start() {\r\n    const { currSlide } = this.gestures.pswp;\r\n    if (currSlide) {\r\n      this._startZoomLevel = currSlide.currZoomLevel;\r\n      equalizePoints(this._startPan, currSlide.pan);\r\n    }\r\n\r\n    this.gestures.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial)\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide?.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === 0) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({ x: 0, y: 0 }, currSlide.pan);\r\n    let destinationPan = equalizePoints({ x: 0, y: 0 }, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide?.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide?.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element?.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y' | null} */\r\n    this.dragAxis = null;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = { x: 0, y: 0 }; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = { x: 0, y: 0 }; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.prevP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.velocity = { x: 0, y: 0 };\r\n\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._lastStartP1 = { x: 0, y: 0 };\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._intervalP1 = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]}\r\n     * @private\r\n     */\r\n    this._ongoingPointers = [];\r\n    /** @private */\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    /** @private */\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @private */\r\n    this._intervalTime = 0;\r\n    /** @private */\r\n    this._velocityCalculated = false;\r\n    this.isMultitouch = false;\r\n    this.isDragging = false;\r\n    this.isZooming = false;\r\n    /** @type {number | null} */\r\n    this.raf = null;\r\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\r\n    this._tapTimer = null;\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(\r\n        pswp.scrollWrap,\r\n        'click',\r\n        /** @type EventListener */(this._onClick.bind(this))\r\n      );\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        if (pswp.scrollWrap) {\r\n          pswp.scrollWrap.ontouchmove = () => {};\r\n          pswp.scrollWrap.ontouchend = () => {};\r\n        }\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(\r\n      pswp.scrollWrap,\r\n      pref + down,\r\n      /** @type EventListener */(this.onPointerDown.bind(this))\r\n    );\r\n    events.add(window, pref + 'move', /** @type EventListener */(this.onPointerMove.bind(this)));\r\n    events.add(window, pref + up, /** @type EventListener */(this.onPointerUp.bind(this)));\r\n    if (cancelEvent) {\r\n      events.add(\r\n        pswp.scrollWrap,\r\n        cancelEvent,\r\n        /** @type EventListener */(this.onPointerUp.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse';\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e, 'down');\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    this._preventPointerEventBehaviour(e, 'move');\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _preventPointerEventBehaviour(e, pointerType) {\r\n    const preventPointerEvent = this.pswp.applyFilters('preventPointerEvent', true, e, pointerType);\r\n    if (preventPointerEvent) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer) => {\r\n        return ongoingPointer.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, { x: 0, y: 0 }));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  /** update points at the start of gesture\r\n   * @private\r\n   */\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  /** @private */\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n    this.slideWidth = 0;\r\n    /** @private */\r\n    this._currPositionIndex = 0;\r\n    /** @private */\r\n    this._prevPositionIndex = 0;\r\n    /** @private */\r\n    this._containerShiftIndex = -1;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = [];\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', 'div', this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    return Boolean(diff);\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    /** @type {ItemHolder | undefined} */\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n\r\n      // If slides are changed by 3 screens or more - clean up previous slides\r\n      this.itemHolders.forEach((itemHolder) => {\r\n        itemHolder.slide?.destroy();\r\n        itemHolder.slide = undefined;\r\n      });\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        if (tempHolder) {\r\n          this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n          this._containerShiftIndex++;\r\n\r\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n        }\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        if (tempHolder) {\r\n          this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n          this._containerShiftIndex--;\r\n\r\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1]?.slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\r\n  moveTo(x, dragging) {\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      let newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      const delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n\r\n    if (this.pswp.container) {\r\n      setTransform(this.pswp.container, x);\r\n    }\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging: dragging ?? false });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\nconst KeyboardKeyCodesMap = {\r\n  Escape: 27,\r\n  z: 90,\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n  Tab: 9,\r\n};\r\n\r\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\r\nconst getKeyboardEventKey = (key, isKeySupported) => {\r\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\r\n};\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    /** @private */\r\n    this._wasFocused = false;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      if (pswp.options.trapFocus) {\r\n        // Dialog was likely opened by keyboard if initial point is not defined\r\n        if (!pswp.options.initialPointerPos) {\r\n          // focus causes layout,\r\n          // which causes lag during the animation,\r\n          // that's why we delay it until the opener transition ends\r\n          this._focusRoot();\r\n        }\r\n\r\n        pswp.events.add(\r\n          document,\r\n          'focusin',\r\n          /** @type EventListener */(this._onFocusIn.bind(this))\r\n        );\r\n      }\r\n\r\n      pswp.events.add(document, 'keydown', /** @type EventListener */(this._onKeyDown.bind(this)));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @private */\r\n  _focusRoot() {\r\n    if (!this._wasFocused && this.pswp.element) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe> | undefined} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y' | undefined} */\r\n    let axis;\r\n    let isForward = false;\r\n    const isKeySupported = 'key' in e;\r\n\r\n    switch (isKeySupported ? e.key : e.keyCode) {\r\n      case getKeyboardEventKey('Escape', isKeySupported):\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case getKeyboardEventKey('z', isKeySupported):\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\r\n        axis = 'x';\r\n        break;\r\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('Tab', isKeySupported):\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      // @ts-ignore\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (template\r\n        && document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish = () => {},\r\n      duration = 333,\r\n      easing = DEFAULT_EASING,\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop] ?? '';\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n    /** @private */\r\n    this._finished = false;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transition won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element property was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    this._dampedFrequency = this._naturalFrequency;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    this._raf = 0;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish = () => {},\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = 0;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\r\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\r\n\r\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\r\n  _start(props, isSpring) {\r\n    const animation = isSpring\r\n      ? new SpringAnimation(/** @type SpringAnimationProps */ (props))\r\n      : new CSSAnimation(/** @type CssAnimationProps */ (props));\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', /** @type EventListener */(this._onWheel.bind(this)));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    /** @type {HTMLElement} */\r\n    const element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      const ariaText = ariaLabel || title;\r\n      if (ariaText) {\r\n        element.setAttribute('aria-label', ariaText);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          // @ts-ignore\r\n          pswp[data.onClick]();\r\n        } else if (typeof data.onClick === 'function') {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    /** @type {HTMLElement | undefined} root element by default */\r\n    let container = pswp.element;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      }\r\n    }\r\n\r\n    container?.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean | undefined} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout | null} */\r\n    let delayTimeout = null;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide?.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(Boolean(pswp.currSlide?.content.isLoading()));\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    if (pswp.ui) {\r\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n    }\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [];\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = () => {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element?.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n\r\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\r\n      return;\r\n    }\r\n\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  /** @type {Bounds | undefined} */\r\n  let thumbBounds;\r\n  /** @type {HTMLElement | null | undefined} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : /** @type {HTMLElement | null} */ (element.querySelector(thumbSelector));\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w || 0,\r\n        itemData.height || itemData.h || 0\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this.isOpen = false;\r\n    this.isClosing = false;\r\n    this.isOpening = false;\r\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\r\n    this._duration = undefined;\r\n    /** @private */\r\n    this._useAnimation = false;\r\n    /** @private */\r\n    this._croppedZoom = false;\r\n    /** @private */\r\n    this._animateRootOpacity = false;\r\n    /** @private */\r\n    this._animateBgOpacity = false;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\r\n    this._placeholder = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._opacityElement = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._cropContainer1 = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\r\n    this._cropContainer2 = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\r\n    this._thumbBounds = undefined;\r\n\r\n\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n  }\r\n\r\n  /** @private */\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = undefined;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = undefined;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide?.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && slide?.content.usePlaceholder()\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening && slide) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity ?? false;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide?.holderElement;\r\n\r\n      if (pswp.container) {\r\n        pswp.container.style.overflow = 'hidden';\r\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n      }\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity && pswp.bg) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = '1';\r\n        }\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      if (pswp.mainScroll.itemHolders[0]) {\r\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      }\r\n      if (pswp.mainScroll.itemHolders[2]) {\r\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n      }\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve(true);\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve(true);\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _initiate() {\r\n    this.pswp.element?.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element?.classList.toggle('pswp--ui-visible', this.isOpening);\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom && pswp.container) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide?.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      if (pswp.currSlide) {\r\n        pswp.currSlide.zoomAndPanToInitial();\r\n        this._animateTo(\r\n          pswp.currSlide.container,\r\n          'transform',\r\n          pswp.currSlide.getCurrentTransform()\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._animateBgOpacity && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    // do not animate opacity if it's already at 0\r\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    if (currSlide) {\r\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n      if (animate) {\r\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n      } else {\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\r\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} trapFocus\r\n * Trap focus within PhotoSwipe element while it's open.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PreparedPhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  trapFocus: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = this._prepareOptions(options || {});\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.viewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     */\r\n    this.bgOpacity = 1;\r\n    this.currIndex = 0;\r\n    this.potentialIndex = 0;\r\n    this.isOpen = false;\r\n    this.isDestroying = false;\r\n    this.hasMouse = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\r\n    this._initialItemData = {};\r\n    /** @type {Bounds | undefined} */\r\n    this._initialThumbBounds = undefined;\r\n\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.topBar = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.template = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.container = undefined;\r\n    /** @type {HTMLElement | undefined} */\r\n    this.scrollWrap = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.currSlide = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n    this.animations = new Animations();\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  /** @returns {boolean} */\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return false;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    if (this.element) {\r\n      this.element.className += ' ' + rootClasses;\r\n    }\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      const { itemHolders } = this.mainScroll;\r\n\r\n      // Add content to the previous and next slide\r\n      if (itemHolders[0]) {\r\n        itemHolders[0].el.style.display = 'block';\r\n        this.setContent(itemHolders[0], this.currIndex - 1);\r\n      }\r\n      if (itemHolders[2]) {\r\n        itemHolders[2].el.style.display = 'block';\r\n        this.setContent(itemHolders[2], this.currIndex + 1);\r\n      }\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    if (this.mainScroll.itemHolders[1]) {\r\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    }\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    return clamp(index, 0, numSlides - 1);\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.appendHeavy();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide?.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide?.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this._listeners = {};\r\n\r\n    if (this.scrollWrap) {\r\n      this.scrollWrap.ontouchmove = null;\r\n      this.scrollWrap.ontouchend = null;\r\n    }\r\n\r\n    this.element?.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.destroy();\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = (this.currSlide?.index ?? 0) - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide?.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = undefined;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  /** @returns {Point} */\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    if (this.bg) {\r\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element?.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp', 'div');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', 'div', this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', 'div', this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PreparedPhotoSwipeOptions} */\r\n    return {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","defaultCSSEasing","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","removeTransitionStyle","decodeImage","img","decode","catch","complete","Promise","resolve","reject","onload","onerror","LOAD_STATE","IDLE","LOADING","LOADED","ERROR","specialKeyUsed","e","button","ctrlKey","metaKey","altKey","shiftKey","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","DOMEvents","constructor","this","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","types","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","Number","getPanAreaSize","PanBounds","slide","currZoomLevel","center","update","_updateAxis","dispatch","reset","axis","elSize","paddingProp","data","panAreaSize","correctPan","panOffset","MAX_IMAGE_WIDTH","ZoomLevel","elementSize","fit","fill","vFill","initial","secondary","maxWidth","maxHeight","hRatio","vRatio","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Slide","isActive","currIndex","currentResolution","pan","isFirstSlide","opener","isOpen","content","contentLoader","getContentBySlide","container","holderElement","heavyAppended","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","appendHeavyNearby","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","_this$content$placeho","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","totalPanDistance","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","Boolean","_applyZoomTransform","currSlide","zoom","newResolution","PAN_END_FRICTION","VERTICAL_DRAG_FRICTION","MIN_RATIO_TO_CLOSE","MIN_NEXT_SLIDE_SPEED","project","initialVelocity","decelerationRate","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","mainScrollChanged","_panOrMoveMainScroll","end","velocity","indexDiff","mainScrollShiftDiff","getCurrSlideX","currentSlideVisibilityRatio","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","isLeftToRight","isRightToLeft","wasAtMinPanPosition","wasAtMaxPanPosition","_this$pswp$currSlide$","_this$pswp$currSlide","potentialPan","customFriction","correctedPan","UPPER_ZOOM_FRICTION","LOWER_ZOOM_FRICTION","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_wasOverFitZoomLevel","_startZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","_this$gestures$pswp$e","actionFullName","clickToCloseNonZoomable","toggle","call","AXIS_SWIPE_HYSTERISIS","DOUBLE_TAP_DELAY","MIN_TAP_DISTANCE","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","_intervalTime","_velocityCalculated","isDragging","isZooming","raf","_tapTimer","drag","tapHandler","on","events","scrollWrap","_onClick","bind","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","mouseDetected","_preventPointerEventBehaviour","_updatePoints","_clearTapTimer","preventDefault","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","Date","_updateVelocity","_finishTap","_updatePrevPoints","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","setTimeout","clearTimeout","displacement","cancelAnimationFrame","preventPointerEvent","applyFilters","pointerEvent","pointerIndex","findIndex","ongoingPointer","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MAIN_SCROLL_END_FRICTION","MainScroll","slideWidth","_currPositionIndex","_prevPositionIndex","_containerShiftIndex","itemHolders","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","resetPosition","appendHolders","i","setAttribute","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","_this$itemHolders$","positionDifference","tempHolder","diffAbs","_itemHolder$slide","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","KeyboardKeyCodesMap","Escape","z","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Tab","getKeyboardEventKey","key","isKeySupported","Keyboard","_wasFocused","trapFocus","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","focus","keydownAction","isForward","keyCode","escKey","arrowKeys","template","DEFAULT_EASING","CSSAnimation","props","_props$prop","onFinish","_target","_onComplete","_finished","_onTransitionEnd","_helperTimeout","_finalizeAnimation","removeEventListener","DEFAULT_NATURAL_FREQUENCY","DEFAULT_DAMPING_RATIO","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","_raf","easer","prevTime","animationLoop","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","addElementHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","UIElement","_container","elementHTML","html","isButton","toLowerCase","title","ariaLabel","ariaText","innerHTML","onInit","onClick","onclick","appendTo","topBar","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","toggleIndicatorClass","setIndicatorVisibility","visible","updatePreloaderVisibility","_pswp$currSlide","isLoading","_pswp$currSlide2","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","isRegistered","uiElementsData","items","_lastUpdatedZoomLevel","init","sort","a","b","uiElementData","registerElement","_pswp$element","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","potentialZoomLevel","imageClickAction","getBoundsByElement","thumbAreaRect","getBoundingClientRect","left","top","getCroppedBoundsByElement","imageWidth","imageHeight","fillZoomLevel","offsetX","offsetY","innerRect","getThumbBounds","instance","thumbBounds","thumbnail","thumbSelector","matches","querySelector","thumbCropped","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","addFilter","fn","priority","_this$_filters$name","_this$_filters$name2","_this$pswp","f1","f2","removeFilter","args","_this$_filters$name3","apply","_this$_listeners$name","_this$pswp2","off","_this$pswp3","_this$_listeners$name2","Placeholder","imageSrc","imgEl","decoding","alt","src","_this$element","parentNode","Content","displayedImageWidth","displayedImageHeight","isAttached","isDecoding","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isImageContent","loadImage","_this$data$src","_this$data$alt","imageElement","updateSrcsetSizes","srcset","onLoaded","onError","setSlide","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","_this$instance$option","_this$instance$option2","errorMsgEl","errorMsg","supportsDecode","finally","appendImage","MIN_SLIDES_TO_CACHE","lazyLoadData","createContentFromData","zoomLevel","ceil","lazyLoadSlide","getItemData","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","initialIndex","getContentByIndex","addToCache","removeByIndex","indexToRemove","item","removedItem","find","PhotoSwipeBase","_this$options","numItems","dataSource","_getGalleryDOMElements","gallery","_this$options2","dataSourceItem","_domElementToItemData","galleryElement","_this$options3","_this$options4","children","childSelector","linkEl","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","_thumbnailEl$getAttri","currentSrc","getAttribute","pswpCropped","cropped","MIN_OPACITY","Opener","isClosed","isOpening","_duration","_useAnimation","_croppedZoom","_animateRootOpacity","_animateBgOpacity","_placeholder","_opacityElement","_cropContainer1","_cropContainer2","_thumbBounds","_prepareOpen","open","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","showAnimationDuration","_options$showHideOpac","showHideAnimationType","showHideOpacity","_initialThumbBounds","_animateZoom","bg","opacity","overflow","_setClosedStateZoomPan","willChange","decoded","isDelaying","_initiate","_this$pswp$element","_this$pswp$element2","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","super","_prepareOptions","_prevViewportSize","isDestroying","hasMouse","_initialItemData","keyboard","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","_this$currSlide","_this$currSlide2","_itemHolder$slide2","refreshSlideContent","slideIndex","_this$currSlide$index","_this$currSlide3","potentialHolderIndex","_itemHolder$slide3","holder","matchMedia","_this$element2","test","userAgent","setScrollOffset","body"],"sourceRoot":""}