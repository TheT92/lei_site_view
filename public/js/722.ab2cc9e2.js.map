{"version":3,"file":"public/js/722.ab2cc9e2.js","mappings":"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","sources":["webpack://my_site/./src/components/img-viewer.vue","webpack://my_site/../../src/js/util/util.js","webpack://my_site/../../src/js/core/eventable.js","webpack://my_site/../../src/js/slide/placeholder.js","webpack://my_site/../../src/js/slide/content.js","webpack://my_site/../../src/js/util/viewport-size.js","webpack://my_site/../../src/js/slide/zoom-level.js","webpack://my_site/../../src/js/slide/loader.js","webpack://my_site/../../src/js/core/base.js","webpack://my_site/../../src/js/lightbox/lightbox.js","webpack://my_site/src/components/img-viewer.vue","webpack://my_site/./src/components/img-viewer.vue?6ea1","webpack://my_site/./src/components/img-viewer.vue?c6a4"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"w-100 overflow-hidden clear-float img-viewer\",class:_vm.className,attrs:{\"id\":_vm.galleryID}},_vm._l((_vm.imagesData),function(image,key){return _c('a',{key:key,staticClass:\"d-block quartor card p-4 float-left\",class:key == _vm.imagesData.length - 1 ? 'mr-0' : '',attrs:{\"href\":_vm.getImg(image.largeURL),\"target\":\"_blank\",\"rel\":\"noreferrer\",\"data-pswp-width\":image.width,\"data-pswp-height\":image.height}},[_c('img',{staticClass:\"w-100\",attrs:{\"src\":_vm.getImg(image.thumbnailURL),\"alt\":\"\"}})])}),0)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  specialKeyUsed,\r\n  getElementsFromOption,\r\n  isPswpClass\r\n} from '../util/util.js';\r\n\r\nimport PhotoSwipeBase from '../core/base.js';\r\nimport { lazyLoadSlide } from '../slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n    this.shouldOpen = false;\r\n    /**\r\n     * @private\r\n     * @type {Content | undefined}\r\n     */\r\n    this._preloadedContent = undefined;\r\n\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp) { // ... if PhotoSwipe is already open\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not the ideal way to detect them.\r\n    //\r\n    /** @type {Point | null} */\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    /** @type {DataSource} */\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   * @returns {number}\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   * @param {Point | null} [initialPoint]\r\n   * @returns {boolean}\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp || !this.options) {\r\n      return false;\r\n    }\r\n\r\n    // Use the first gallery element if dataSource is not provided\r\n    if (!dataSource && this.options.gallery && this.options.children) {\r\n      const galleryElements = getElementsFromOption(this.options.gallery);\r\n      if (galleryElements[0]) {\r\n        dataSource = {\r\n          gallery: galleryElements[0]\r\n        };\r\n      }\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name]?.forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name]?.forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = undefined;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = undefined;\r\n      delete window.pswp;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    this.pswp?.destroy();\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = {};\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeLightbox;\r\n","<template>\r\n  <div\r\n    :id=\"galleryID\"\r\n    :class=\"className\"\r\n    class=\"w-100 overflow-hidden clear-float img-viewer\"\r\n  >\r\n    <a\r\n      v-for=\"(image, key) in imagesData\"\r\n      :key=\"key\"\r\n      :href=\"getImg(image.largeURL)\"\r\n      target=\"_blank\"\r\n      rel=\"noreferrer\"\r\n      :data-pswp-width=\"image.width\"\r\n      :data-pswp-height=\"image.height\"\r\n      :class=\"key == imagesData.length - 1 ? 'mr-0' : ''\"\r\n      class=\"d-block quartor card p-4 float-left\"\r\n    >\r\n      <img class=\"w-100\" :src=\"getImg(image.thumbnailURL)\" alt=\"\" />\r\n    </a>\r\n  </div>\r\n</template>\r\n  \r\n  <script>\r\nimport PhotoSwipeLightbox from \"photoswipe/lightbox\";\r\nimport \"photoswipe/style.css\";\r\n\r\nexport default {\r\n  name: \"SimpleGallery\",\r\n  props: {\r\n    galleryID: String,\r\n    images: Array,\r\n    className: String,\r\n  },\r\n  computed: {\r\n    getImg() {\r\n      return function (url) {\r\n        return require(`@/assets/${url}`);\r\n      };\r\n    },\r\n  },\r\n  setup(props) {\r\n    return {\r\n      imagesData: props.images,\r\n    };\r\n  },\r\n  mounted() {\r\n    if (!this.lightbox) {\r\n      this.lightbox = new PhotoSwipeLightbox({\r\n        gallery: \"#\" + this.$props.galleryID,\r\n        children: \"a\",\r\n        pswpModule: () => import(\"photoswipe\"),\r\n      });\r\n      this.lightbox.init();\r\n    }\r\n  },\r\n  unmounted() {\r\n    if (this.lightbox) {\r\n      this.lightbox.destroy();\r\n      this.lightbox = null;\r\n    }\r\n  },\r\n  methods: {},\r\n};\r\n</script>\r\n  ","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./img-viewer.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./img-viewer.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./img-viewer.vue?vue&type=template&id=5f257d14\"\nimport script from \"./img-viewer.vue?vue&type=script&lang=js\"\nexport * from \"./img-viewer.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","class","className","attrs","galleryID","_l","imagesData","image","key","length","getImg","largeURL","width","height","thumbnailURL","staticRenderFns","createElement","tagName","appendToEl","el","document","appendChild","toTransformString","x","y","scale","propValue","undefined","setWidthHeight","w","h","style","LOAD_STATE","IDLE","LOADING","LOADED","ERROR","specialKeyUsed","e","button","ctrlKey","metaKey","altKey","shiftKey","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","isPswpClass","fn","prototype","goTo","isSafari","navigator","vendor","match","PhotoSwipeEvent","constructor","type","details","defaultPrevented","Object","assign","preventDefault","Eventable","_listeners","_filters","pswp","options","addFilter","name","priority","_this$_filters$name","_this$_filters$name2","_this$pswp","push","sort","f1","f2","removeFilter","filter","applyFilters","args","_this$_filters$name3","forEach","apply","on","_this$_listeners$name","_this$pswp2","off","_this$pswp3","listener","dispatch","_this$_listeners$name2","event","call","Placeholder","imageSrc","container","element","imgEl","decoding","alt","src","setAttribute","setDisplayedSize","transformOrigin","transform","destroy","_this$element","parentNode","remove","Content","itemData","instance","index","data","placeholder","slide","displayedImageWidth","displayedImageHeight","Number","isAttached","hasSlide","isDecoding","state","content","removePlaceholder","keepPlaceholder","setTimeout","load","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isFirstSlide","isImageContent","loadImage","innerHTML","html","updateContentSize","_this$data$src","_this$data$alt","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","isActive","heavyAppended","append","displayError","isError","isLoading","isInitialSizeUpdate","isZoomable","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","_this$instance$option","_this$instance$option2","errorMsgEl","innerText","errorMsg","supportsDecode","decode","catch","finally","appendImage","activate","holderElement","deactivate","getViewportSize","getViewportSizeFn","newViewportSize","documentElement","clientWidth","window","innerHeight","parsePaddingOption","prop","viewportSize","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","getPanAreaSize","MAX_IMAGE_WIDTH","ZoomLevel","panAreaSize","elementSize","fit","fill","vFill","initial","secondary","max","min","update","maxWidth","maxHeight","hRatio","vRatio","Math","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","currZoomLevel","lazyLoadData","createContentFromData","zoomLevel","ceil","lazyLoadSlide","getItemData","PhotoSwipeBase","getNumItems","_this$options","numItems","dataSource","items","_getGalleryDOMElements","gallery","_this$options2","dataSourceItem","_domElementToItemData","galleryElement","_this$options3","_this$options4","children","childSelector","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","_thumbnailEl$getAttri","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","PhotoSwipeLightbox","super","_uid","shouldOpen","_preloadedContent","onThumbnailsClick","bind","init","gallerySelector","addEventListener","initialPoint","clientX","clientY","clickedIndex","getClickedIndex","currentTarget","loadAndOpen","getClickedIndexFn","clickedTarget","target","childElements","clickedChildIndex","findIndex","child","contains","galleryElements","initialPointerPos","preload","promiseArray","pswpModuleType","pswpModule","Promise","resolve","Error","openPromise","preloadFirstSlide","uid","all","then","iterableModules","mainModule","_openPhotoswipe","module","default","keys","contentLoader","addToCache","removeEventListener","props","images","computed","url","require","setup","mounted","lightbox","$props","unmounted","methods","component"],"sourceRoot":""}